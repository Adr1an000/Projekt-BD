// <auto-generated />
using System;
using InformacjeTurystyczne.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InformacjeTurystyczne.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200415125001_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InformacjeTurystyczne.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategory");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.Entertainment", b =>
                {
                    b.Property<int>("IdEntertainment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdRegion")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UpToDate")
                        .HasColumnType("bit");

                    b.HasKey("IdEntertainment");

                    b.HasIndex("IdRegion");

                    b.ToTable("Entertainment");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.Message", b =>
                {
                    b.Property<int>("IdMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdCategory")
                        .HasColumnType("int");

                    b.Property<int?>("IdRegion")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostingDate1")
                        .HasColumnType("datetime2");

                    b.HasKey("IdMessage");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdRegion");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.PermissionEntertainment", b =>
                {
                    b.Property<int>("IdPermissionEntertainment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdEntertainment")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdPermissionEntertainment");

                    b.HasIndex("IdEntertainment");

                    b.HasIndex("IdUser");

                    b.ToTable("PermissionEntertainment");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.PermissionRegion", b =>
                {
                    b.Property<int>("IdPermissionRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdRegion")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdPermissionRegion");

                    b.HasIndex("IdRegion");

                    b.HasIndex("IdUser");

                    b.ToTable("PermissionRegion");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.PermissionShelter", b =>
                {
                    b.Property<int>("IdPermissionShelter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdShelter")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdPermissionShelter");

                    b.HasIndex("IdShelter");

                    b.HasIndex("IdUser");

                    b.ToTable("PermissionShelter");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.PermissionTrial", b =>
                {
                    b.Property<int>("IdPermissionTrial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdTrial")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdPermissionTrial");

                    b.HasIndex("IdTrial");

                    b.HasIndex("IdUser");

                    b.ToTable("PermissionTrial");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.Region", b =>
                {
                    b.Property<int>("IdRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRegion");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.RegionLocation", b =>
                {
                    b.Property<int>("IdRegionLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdRegion")
                        .HasColumnType("int");

                    b.Property<int?>("IdTrial")
                        .HasColumnType("int");

                    b.HasKey("IdRegionLocation");

                    b.HasIndex("IdRegion");

                    b.HasIndex("IdTrial");

                    b.ToTable("RegionLocation");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.Shelter", b =>
                {
                    b.Property<int>("IdShelter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdRegion")
                        .HasColumnType("int");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPlaces")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Places")
                        .HasColumnType("int");

                    b.HasKey("IdShelter");

                    b.HasIndex("IdRegion");

                    b.ToTable("Shelter");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.Subscription", b =>
                {
                    b.Property<int>("IdSubscription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdRegion")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsSubscribed")
                        .HasColumnType("bit");

                    b.HasKey("IdSubscription");

                    b.HasIndex("IdRegion");

                    b.HasIndex("IdUser");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.Trial", b =>
                {
                    b.Property<int>("IdTrial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Colour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<bool>("Open")
                        .HasColumnType("bit");

                    b.HasKey("IdTrial");

                    b.ToTable("Trial");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.Entertainment", b =>
                {
                    b.HasOne("InformacjeTurystyczne.Models.Tabels.Region", "Region")
                        .WithMany("Entertainment")
                        .HasForeignKey("IdRegion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.Message", b =>
                {
                    b.HasOne("InformacjeTurystyczne.Models.Tabels.Category", "Category")
                        .WithMany("Messages")
                        .HasForeignKey("IdCategory");

                    b.HasOne("InformacjeTurystyczne.Models.Tabels.Region", "Region")
                        .WithMany("Message")
                        .HasForeignKey("IdRegion");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.PermissionEntertainment", b =>
                {
                    b.HasOne("InformacjeTurystyczne.Models.Tabels.Entertainment", "Entertainment")
                        .WithMany("PermissionEntertainment")
                        .HasForeignKey("IdEntertainment");

                    b.HasOne("InformacjeTurystyczne.Models.AppUser", "User")
                        .WithMany("PermissionEntertainments")
                        .HasForeignKey("IdUser");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.PermissionRegion", b =>
                {
                    b.HasOne("InformacjeTurystyczne.Models.Tabels.Region", "Region")
                        .WithMany("PermissionRegion")
                        .HasForeignKey("IdRegion");

                    b.HasOne("InformacjeTurystyczne.Models.AppUser", "User")
                        .WithMany("PermissionRegions")
                        .HasForeignKey("IdUser");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.PermissionShelter", b =>
                {
                    b.HasOne("InformacjeTurystyczne.Models.Tabels.Shelter", "Shelter")
                        .WithMany("PermissionShelters")
                        .HasForeignKey("IdShelter");

                    b.HasOne("InformacjeTurystyczne.Models.AppUser", "User")
                        .WithMany("PermissionShelters")
                        .HasForeignKey("IdUser");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.PermissionTrial", b =>
                {
                    b.HasOne("InformacjeTurystyczne.Models.Tabels.Trial", "Trial")
                        .WithMany("PermissionTrial")
                        .HasForeignKey("IdTrial");

                    b.HasOne("InformacjeTurystyczne.Models.AppUser", "User")
                        .WithMany("PermissionTrials")
                        .HasForeignKey("IdUser");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.RegionLocation", b =>
                {
                    b.HasOne("InformacjeTurystyczne.Models.Tabels.Region", "Region")
                        .WithMany("RegionLocation")
                        .HasForeignKey("IdRegion");

                    b.HasOne("InformacjeTurystyczne.Models.Tabels.Trial", "Trial")
                        .WithMany("RegionLocation")
                        .HasForeignKey("IdTrial");
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.Shelter", b =>
                {
                    b.HasOne("InformacjeTurystyczne.Models.Tabels.Region", "Region")
                        .WithMany("Shelter")
                        .HasForeignKey("IdRegion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InformacjeTurystyczne.Models.Tabels.Subscription", b =>
                {
                    b.HasOne("InformacjeTurystyczne.Models.Tabels.Region", "Region")
                        .WithMany("Subscription")
                        .HasForeignKey("IdRegion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InformacjeTurystyczne.Models.AppUser", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("IdUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InformacjeTurystyczne.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InformacjeTurystyczne.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InformacjeTurystyczne.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InformacjeTurystyczne.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
